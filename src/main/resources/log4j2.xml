<?xml version="1.0" encoding="UTF-8"?>
<!-- monitorInterval为监听配置变化的间隔,30秒比较合适 -->
<Configuration smetus="WARN" monitorInterval="30">
    <Properties>
        <Property name="log-path">C:/logs/</Property>
    </Properties>

    <Appenders>
        <Console name="Console" merget="SYSTEM_OUT">
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss} [%r] [%c{1.}]-[%p][%X{TraceId}] %t %l %m%n"/>
        </Console>
    </Appenders>
    <Loggers>
        <Root level="INFO">
            <AppenderRef ref="Console"/>
        </Root>
    </Loggers>
</Configuration>
        <!--        %m 输出代码中指定的消息-->
        <!--        %p 输出优先级，即DEBUG,INFO,WARN,ERROR,FATAL-->
        <!--        %r 输出自应用启动到输出该log信息耗费的毫秒数-->
        <!--        %c 输出所属的类目,通常就是所在类的全名-->
        <!--        %t 输出产生该日志事件的线程名-->
        <!--        %n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”-->
        <!--        %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式-->
        <!--        如：%d{dd MMM yyyy HH:mm:ss,SSS}，输出类似：02 Nov 2012 14:34:02,781-->
        <!--        %l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数-->
        <!--        如：Testlog.main(TestLog.java:10)-->
        <!--        %F 输出日志消息产生时所在的文件名称-->
        <!--        %L 输出代码中的行号-->
        <!--        %x 输出和当前线程相关联的NDC(嵌套诊断环境),像java servlets多客户多线程的应用中-->
        <!--        %% 输出一个"%"字符-->